//Copyright (C) 2024 AI Quiz Solver
//Universal quiz solver powered by Gemini AI

//This script serves as the main loader

var mirrors = [
    "https://cdn.jsdelivr.net/gh/Rolandelving/krptcedtn@latest",
    "https://raw.githubusercontent.com/Rolandelving/krptcedtn/main"
];

async function try_mirror(mirror) {
    let r = await fetch(mirror + "/main.js");
    let script = await r.text();
    window.quiz_solver_base_url = mirror;
    eval(script);
}

async function init() {
    // Prevent multiple instances
    if (window.aiQuizSolverActive) {
        console.log("AI Quiz Solver already running");
        return;
    }

    // Check if we're on a mirror site
    if (window.location.hostname.includes("github") || window.location.hostname.includes("jsdelivr")) {
        alert("To use this, drag this button into your bookmarks bar. Then, run it when you're on a quiz page.");
        return;
    }

    // Development environment check
    if (document.dev_env) {
        return try_mirror(document.dev_env);
    }

    // Try each mirror until one works
    for (let mirror of mirrors) {
        try {
            await try_mirror(mirror);
            return;
        } catch (error) {
            console.log(`Mirror ${mirror} failed:`, error);
        }
    }

    // If all mirrors fail, show fallback
    showFallbackSolver();
}

// Fallback solver if mirrors are blocked
function showFallbackSolver() {
    if (window.aiQuizSolverActive) return;
    window.aiQuizSolverActive = true;

    // Create enhanced UI
    const panel = document.createElement('div');
    panel.innerHTML = `
        <div style="position: fixed; top: 20px; right: 20px; z-index: 999999; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white; padding: 25px; border-radius: 20px; 
                    box-shadow: 0 15px 35px rgba(0,0,0,0.4); 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    width: 380px; backdrop-filter: blur(15px); border: 1px solid rgba(255,255,255,0.1);">
            
            <div style="text-align: center; margin-bottom: 20px;">
                <div style="font-size: 24px; margin-bottom: 5px;">🤖</div>
                <h3 style="margin: 0; font-size: 20px; font-weight: 600;">AI Quiz Solver</h3>
                <div style="font-size: 13px; opacity: 0.8; margin-top: 5px;">
                    Powered by Gemini AI • Found: <span id="qCount">0</span> questions
                </div>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 20px;">
                <button id="solveBtn" style="background: linear-gradient(45deg, #4CAF50, #45a049); 
                               color: white; border: none; padding: 14px; border-radius: 12px; 
                               cursor: pointer; font-weight: 600; font-size: 14px; 
                               transition: all 0.3s; box-shadow: 0 4px 12px rgba(76,175,80,0.3);">
                    🧠 Solve Quiz
                </button>
                <button id="undoBtn" style="background: linear-gradient(45deg, #f44336, #d32f2f); 
                               color: white; border: none; padding: 14px; border-radius: 12px; 
                               cursor: pointer; font-weight: 600; font-size: 14px; 
                               transition: all 0.3s; box-shadow: 0 4px 12px rgba(244,67,54,0.3);">
                    ↩️ Undo All
                </button>
            </div>

            <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 12px; margin-bottom: 20px;">
                <select id="langSelect" style="padding: 12px; border-radius: 10px; border: none; 
                                background: rgba(255,255,255,0.95); font-size: 14px; font-weight: 500;">
                    <option value="spanish">🇪🇸 Spanish</option>
                    <option value="french">🇫🇷 French</option>
                    <option value="german">🇩🇪 German</option>
                    <option value="italian">🇮🇹 Italian</option>
                    <option value="japanese">🇯🇵 Japanese</option>
                    <option value="chinese">🇨🇳 Chinese</option>
                    <option value="korean">🇰🇷 Korean</option>
                    <option value="auto">🌍 Auto</option>
                </select>
                <select id="levelSelect" style="padding: 12px; border-radius: 10px; border: none; 
                                 background: rgba(255,255,255,0.95); font-size: 14px; font-weight: 500;">
                    <option value="beginner">Basic</option>
                    <option value="intermediate">Inter</option>
                    <option value="advanced">Adv</option>
                </select>
            </div>

            <div id="logArea" style="background: rgba(0,0,0,0.4); padding: 15px; border-radius: 12px; 
                         max-height: 200px; overflow-y: auto; font-size: 13px; 
                         font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace; 
                         border: 1px solid rgba(255,255,255,0.1);">
                <div style="color: #4CAF50; font-weight: 600;">🤖 AI Quiz Solver Ready!</div>
                <div style="color: #2196F3; margin-top: 5px;">🧠 Select language and click Solve</div>
            </div>

            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 15px;">
                <div style="font-size: 11px; opacity: 0.7;">v2.0 • Universal</div>
                <button onclick="this.parentElement.parentElement.remove(); window.aiQuizSolverActive=false;" 
                        style="background: rgba(255,255,255,0.1); color: white; border: none; 
                               padding: 8px 16px; border-radius: 8px; cursor: pointer; font-size: 12px;
                               transition: all 0.3s; backdrop-filter: blur(5px);">
                    ✕ Close
                </button>
            </div>
        </div>
    `;
    document.body.appendChild(panel);

    // Initialize the solver
    initializeSolver();
}

function initializeSolver() {
    const logArea = document.getElementById('logArea');
    const questionCount = document.getElementById('qCount');
    const solveBtn = document.getElementById('solveBtn');
    const undoBtn = document.getElementById('undoBtn');
    const langSelect = document.getElementById('langSelect');
    const levelSelect = document.getElementById('levelSelect');
    
    let originalValues = [];
    let isProcessing = false;

    function log(message, color = '#FFFFFF') {
        const div = document.createElement('div');
        div.style.color = color;
        div.style.marginTop = '4px';
        div.innerHTML = `<span style="opacity: 0.6;">[${new Date().toLocaleTimeString()}]</span> ${message}`;
        logArea.appendChild(div);
        logArea.scrollTop = logArea.scrollHeight;
    }

    // Enhanced question detection
    function findAllQuestions() {
        const questions = [];
        
        // Text inputs
        const textInputs = document.querySelectorAll('input[type="text"]:not([readonly]):not([disabled]), textarea:not([readonly]):not([disabled])');
        textInputs.forEach(input => {
            questions.push({
                type: 'text',
                element: input,
                container: input.closest('li, tr, td, div, form, fieldset, section')
            });
        });
        
        // Radio button groups
        const radioGroups = {};
        document.querySelectorAll('input[type="radio"]').forEach((radio, index) => {
            let name = radio.name;
            if (!name) {
                const container = radio.closest('form, fieldset, div[class*="question"], ol, ul');
                name = 'group_' + (container ? Array.from(document.querySelectorAll('form, fieldset, div')).indexOf(container) : index);
            }
            
            if (!radioGroups[name]) {
                radioGroups[name] = {
                    type: 'radio',
                    name: name,
                    options: [],
                    container: radio.closest('form, fieldset, div, section, body')
                };
            }
            radioGroups[name].options.push(radio);
        });
        
        Object.values(radioGroups).forEach(group => {
            if (group.options.length >= 1) {
                questions.push(group);
            }
        });
        
        // Checkbox groups
        const checkboxGroups = {};
        document.querySelectorAll('input[type="checkbox"]').forEach((checkbox, index) => {
            let name = checkbox.name;
            if (!name) {
                const container = checkbox.closest('form, fieldset, div[class*="question"], ol, ul');
                name = 'checkbox_group_' + (container ? Array.from(document.querySelectorAll('form, fieldset, div')).indexOf(container) : index);
            }
            
            if (!checkboxGroups[name]) {
                checkboxGroups[name] = {
                    type: 'checkbox',
                    name: name,
                    options: [],
                    container: checkbox.closest('form, fieldset, div, section, body')
                };
            }
            checkboxGroups[name].options.push(checkbox);
        });
        
        Object.values(checkboxGroups).forEach(group => {
            if (group.options.length >= 1) {
                questions.push(group);
            }
        });
        
        return questions;
    }

    function getQuestionText(question) {
        if (!question.container) return '';
        
        let questionText = '';
        
        if (question.type === 'radio' || question.type === 'checkbox') {
            const allText = question.container.textContent || question.container.innerText || '';
            const lines = allText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
            
            // Find the main question
            for (const line of lines) {
                if (line.includes('?') || (line.length > 15 && !line.match(/^\d+[\.\)]/))) {
                    questionText = line;
                    break;
                }
            }
            
            if (!questionText && lines.length > 0) {
                questionText = lines[0];
            }
            
            // Add options
            const optionsText = [];
            question.options.forEach(option => {
                let label = document.querySelector(`label[for="${option.id}"]`) || option.closest('label');
                if (!label && option.nextSibling) {
                    label = option.nextSibling.nodeType === 3 ? option.nextSibling : option.nextElementSibling;
                }
                
                if (label) {
                    let optionText = label.textContent.replace(/\s+/g, ' ').trim();
                    optionText = optionText.replace(/^[○●◯◉]\s*/, '').replace(/^[A-Z]\.\s*/, '');
                    if (optionText && !optionText.match(/^(Submit|Skip|Save)/i)) {
                        optionsText.push(optionText);
                    }
                }
            });
            
            if (optionsText.length > 0) {
                questionText += ' Options: ' + optionsText.join(', ');
            }
            
        } else {
            const clone = question.container.cloneNode(true);
            clone.querySelectorAll('input, textarea, button, select').forEach(el => el.remove());
            questionText = (clone.textContent || clone.innerText || '')
                .replace(/\s+/g, ' ')
                .trim()
                .replace(/^\d+\.\s*/, '')
                .replace(/^[a-z]\)\s*/i, '');
        }
        
        return questionText.trim();
    }

    async function askGeminiAI(questionText, targetLanguage, level) {
        try {
            let prompt;
            if (targetLanguage === 'auto') {
                prompt = `Answer this quiz question: "${questionText}" - Give the most likely correct answer. If it's a multiple choice question, give exactly one of the provided options. Be concise.`;
            } else {
                prompt = `Language learning quiz: "${questionText}" - Target language: ${targetLanguage}, Level: ${level}. If English word, translate to ${targetLanguage}. If asking for ${targetLanguage} word, provide it. For multiple choice, select the correct option. Include articles (el/la) for Spanish when appropriate. Give only the answer.`;
            }
            
            const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyDe5EWvatqRUvJSciuqB-DoVSrB03MtKl8', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: prompt }] }],
                    generationConfig: {
                        temperature: 0.2,
                        maxOutputTokens: 100
                    }
                })
            });
            
            if (!response.ok) throw new Error(`API Error: ${response.status}`);
            
            const data = await response.json();
            if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
                return data.candidates[0].content.parts[0].text.trim()
                    .replace(/^(Answer:|Translation:|Result:)\s*/i, '')
                    .replace(/['"]/g, '');
            }
            throw new Error('No response from AI');
        } catch (error) {
            return `[AI Error: ${error.message}]`;
        }
    }

    function answerQuestion(question, aiAnswer) {
        if (question.type === 'text') {
            originalValues.push({ type: 'text', element: question.element, value: question.element.value });
            question.element.value = aiAnswer;
            question.element.dispatchEvent(new Event('input', { bubbles: true }));
            question.element.dispatchEvent(new Event('change', { bubbles: true }));
            return true;
            
        } else if (question.type === 'radio') {
            let selected = false;
            question.options.forEach(option => {
                originalValues.push({ type: 'radio', element: option, checked: option.checked });
                
                let label = document.querySelector(`label[for="${option.id}"]`) || option.closest('label');
                if (!label && option.nextSibling) {
                    label = option.nextSibling.nodeType === 3 ? option.nextSibling : option.nextElementSibling;
                }
                
                if (label) {
                    const optionText = label.textContent.replace(/\s+/g, ' ').trim();
                    if (optionText.toLowerCase().includes(aiAnswer.toLowerCase()) || 
                        aiAnswer.toLowerCase().includes(optionText.toLowerCase())) {
                        option.checked = true;
                        option.dispatchEvent(new Event('change', { bubbles: true }));
                        selected = true;
                    } else {
                        option.checked = false;
                    }
                }
            });
            return selected;
            
        } else if (question.type === 'checkbox') {
            let selected = false;
            question.options.forEach(option => {
                originalValues.push({ type: 'checkbox', element: option, checked: option.checked });
                
                let label = document.querySelector(`label[for="${option.id}"]`) || option.closest('label');
                if (label) {
                    const optionText = label.textContent.replace(/\s+/g, ' ').trim();
                    if (optionText.toLowerCase().includes(aiAnswer.toLowerCase()) || 
                        aiAnswer.toLowerCase().includes(optionText.toLowerCase())) {
                        option.checked = true;
                        option.dispatchEvent(new Event('change', { bubbles: true }));
                        selected = true;
                    }
                }
            });
            return selected;
        }
        return false;
    }

    // Initialize
    const allQuestions = findAllQuestions();
    questionCount.textContent = allQuestions.length;
    
    if (allQuestions.length === 0) {
        log('⚠️ No quiz questions detected', '#ff9800');
        log('💡 Try navigating to a quiz page', '#2196f3');
    } else {
        log(`🎯 Detected ${allQuestions.length} questions`, '#4caf50');
        const types = [...new Set(allQuestions.map(q => q.type))];
        log(`📝 Types: ${types.join(', ')}`, '#2196f3');
    }

    // Solve button
    solveBtn.onclick = async function() {
        if (isProcessing) return;
        isProcessing = true;
        
        const targetLanguage = langSelect.value;
        const level = levelSelect.value;
        
        log('🚀 Starting AI solver...', '#4caf50');
        log(`🎯 Language: ${targetLanguage}, Level: ${level}`, '#2196f3');
        
        this.disabled = true;
        this.textContent = '🧠 Processing...';
        this.style.background = 'linear-gradient(45deg, #ff9800, #f57c00)';
        
        let success = 0, failed = 0;
        
        for (let i = 0; i < allQuestions.length; i++) {
            const question = allQuestions[i];
            const questionText = getQuestionText(question);
            
            if (!questionText || questionText.length < 5) {
                log(`⏭️ Q${i + 1}: No text, skipping`, '#ff9800');
                continue;
            }
            
            log(`🧠 Q${i + 1} (${question.type}): "${questionText.substring(0, 60)}..."`, '#2196f3');
            
            const aiAnswer = await askGeminiAI(questionText, targetLanguage, level);
            const answered = answerQuestion(question, aiAnswer);
            
            if (aiAnswer.includes('[') && aiAnswer.includes('Error')) {
                log(`❌ Q${i + 1}: ${aiAnswer}`, '#f44336');
                failed++;
            } else if (!answered && (question.type === 'radio' || question.type === 'checkbox')) {
                log(`⚠️ Q${i + 1}: No match for "${aiAnswer}"`, '#ff9800');
                failed++;
            } else {
                log(`✅ Q${i + 1}: ${aiAnswer}`, '#4caf50');
                success++;
            }
            
            await new Promise(resolve => setTimeout(resolve, 600));
        }
        
        const successRate = Math.round((success / allQuestions.length) * 100);
        log(`📊 Results: ${success}✅ ${failed}❌ (${successRate}%)`, '#2196f3');
        
        // Auto-submit
        const submitBtn = document.querySelector('input[type="submit"], button[type="submit"], button[class*="submit" i]');
        if (submitBtn && success > failed) {
            log('🚀 Auto-submitting in 2 seconds...', '#4caf50');
            setTimeout(() => {
                submitBtn.click();
                log('✅ Quiz submitted!', '#4caf50');
            }, 2000);
        }
        
        this.textContent = '✅ Complete';
        this.style.background = 'linear-gradient(45deg, #4caf50, #45a049)';
        isProcessing = false;
    };

    // Undo button
    undoBtn.onclick = function() {
        if (originalValues.length === 0) {
            log('ℹ️ Nothing to undo', '#ff9800');
            return;
        }
        
        originalValues.forEach(orig => {
            if (orig.type === 'text') {
                orig.element.value = orig.value;
                orig.element.dispatchEvent(new Event('input', { bubbles: true }));
                orig.element.dispatchEvent(new Event('change', { bubbles: true }));
            } else {
                orig.element.checked = orig.checked;
                orig.element.dispatchEvent(new Event('change', { bubbles: true }));
            }
        });
        
        log(`↩️ Reverted ${originalValues.length} changes`, '#4caf50');
        originalValues = [];
        solveBtn.textContent = '🧠 Solve Quiz';
        solveBtn.style.background = 'linear-gradient(45deg, #4CAF50, #45a049)';
        solveBtn.disabled = false;
        isProcessing = false;
    };
}

// Start the initialization
init();
